DROP TABLE IF EXISTS BOOKS;
DROP TABLE IF EXISTS COMMENTS;
DROP TABLE IF EXISTS AUTHORS;
DROP TABLE IF EXISTS PUBLISHING_HOUSES;
DROP TABLE IF EXISTS LOOKUP_VALUES;

CREATE TABLE LOOKUP_VALUES(
    LOOKUP_TYPE VARCHAR(30),
    LANGUAGE CHAR(2),
    LOOKUP_CODE VARCHAR(30),
    MEANING VARCHAR(80),
    DESCRIPTION VARCHAR(240),
    ENABLED_FLAG CHAR(1),
    START_DATE_ACTIVE DATE,
    END_DATE_ACTIVE DATE,
    UNIQUE(LOOKUP_TYPE,LANGUAGE,LOOKUP_CODE)
);

CREATE TABLE AUTHORS(
    AUTHOR_ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    COUNTRY CHAR(2),
    SEX CHAR(1),
    DATE_OF_BIRTH DATE
);

CREATE TABLE PUBLISHING_HOUSES (
    PUBLISHING_HOUSE_ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,
    NAME VARCHAR(255) NOT NULL,
    SETTLEMENT_YEAR SMALLINT
);

CREATE TABLE BOOKS (
    BOOK_ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,
    NAME VARCHAR(255),
    GENRE VARCHAR(30) NOT NULL,
    AUTHOR_ID BIGINT,
    PUBLISHING_HOUSE_ID BIGINT,
    PUBLISHING_YEAR SMALLINT,
    PAGES SMALLINT,
    AGE_LIMIT VARCHAR(3),
    FOREIGN KEY(AUTHOR_ID) REFERENCES AUTHORS(AUTHOR_ID),
    FOREIGN KEY(PUBLISHING_HOUSE_ID) REFERENCES PUBLISHING_HOUSES(PUBLISHING_HOUSE_ID)
);

CREATE TABLE USERS (
    USER_ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,
    LOGIN VARCHAR(30) NOT NULL,
    PASSWORD VARCHAR(150) NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    UNIQUE KEY LOGIN_UNIQUE (LOGIN)
);

CREATE TABLE AUTHORITIES (
    LOGIN VARCHAR(30) NOT NULL,
    AUTHORITY VARCHAR(50) NOT NULL,
    CONSTRAINT FK_AUTHORITIES_USERS FOREIGN KEY(LOGIN) REFERENCES USERS(LOGIN)
);
CREATE UNIQUE INDEX IX_AUTH_LOGIN ON AUTHORITIES (LOGIN,AUTHORITY);

CREATE TABLE COMMENTS (
    COMMENT_ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,
    BOOK_ID BIGINT NOT NULL,
    COMMENT VARCHAR(4000),
    CREATED_BY BIGINT NOT NULL,
    CREATION_DATE DATE NOT NULL DEFAULT TODAY,
    LAST_UPDATED_BY BIGINT,
    LAST_UPDATE_DATE DATE,
    FOREIGN KEY(BOOK_ID) REFERENCES BOOKS(BOOK_ID),
    FOREIGN KEY(CREATED_BY) REFERENCES USERS(USER_ID),
    FOREIGN KEY(LAST_UPDATED_BY) REFERENCES USERS(USER_ID)
);

--
-- ACL Security
--

CREATE TABLE IF NOT EXISTS acl_sid (
  id bigint(20) NOT NULL AUTO_INCREMENT,
  principal tinyint(1) NOT NULL,
  sid varchar(100) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY unique_uk_1 (sid,principal)
);

CREATE TABLE IF NOT EXISTS acl_class (
  id bigint(20) NOT NULL AUTO_INCREMENT,
  class varchar(255) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY unique_uk_2 (class)
);
 
CREATE TABLE IF NOT EXISTS acl_entry (
  id bigint(20) NOT NULL AUTO_INCREMENT,
  acl_object_identity bigint(20) NOT NULL,
  ace_order int(11) NOT NULL,
  sid bigint(20) NOT NULL,
  mask int(11) NOT NULL,
  granting tinyint(1) NOT NULL,
  audit_success tinyint(1) NOT NULL,
  audit_failure tinyint(1) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY unique_uk_4 (acl_object_identity,ace_order)
);
 
CREATE TABLE IF NOT EXISTS acl_object_identity (
  id bigint(20) NOT NULL AUTO_INCREMENT,
  object_id_class bigint(20) NOT NULL,
  object_id_identity bigint(20) NOT NULL,
  parent_object bigint(20) DEFAULT NULL,
  owner_sid bigint(20) DEFAULT NULL,
  entries_inheriting tinyint(1) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY unique_uk_3 (object_id_class,object_id_identity)
);
 
ALTER TABLE acl_entry
ADD FOREIGN KEY (acl_object_identity) REFERENCES acl_object_identity(id);

ALTER TABLE acl_entry
ADD FOREIGN KEY (sid) REFERENCES acl_sid(id);
 
--
-- Constraints for table acl_object_identity
--
ALTER TABLE acl_object_identity
ADD FOREIGN KEY (parent_object) REFERENCES acl_object_identity (id);

ALTER TABLE acl_object_identity
ADD FOREIGN KEY (object_id_class) REFERENCES acl_class (id);

ALTER TABLE acl_object_identity
ADD FOREIGN KEY (owner_sid) REFERENCES acl_sid (id);
